jQuery(document).ready(function ($) {
	// console.debug($(location).attr('href'));
});

function getdBlueSuggestion() {
	let tc = getURLParameter('tc');
	let dc = getURLParameter('dc');
	let topics = getURLParameter('topics');
	let atrn = getURLParameter('atrn');
	let atrv = getURLParameter('atrv');
	let aparOnly = getURLParameter('apar');
	let dr = getURLParameter('dr');

	if (aparOnly.length > 0 && 'only' === aparOnly) {
		if (tc.length > 0 && dc.length > 0) {
			if (atrn.length > 0 && atrv.length > 0) {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + getAparOnly().join(' OR tsdoctype:') + ')' + getAtr() + getDcDate(dr);
			} else {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + getAparOnly().join(' OR tsdoctype:') + ')' + getDcDate(dr);
			}
		} else if (tc.length > 0) {
			if (atrn.length > 0 && atrv.length > 0) {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getAparOnly().join(' OR tsdoctype:') + ')' + getAtr() + getDcDate(dr);
			} else {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getAparOnly().join(' OR tsdoctype:') + ')' + getDcDate(dr);
			}
		} else if (dc.length > 0) {
			return '(tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + getAparOnly().join(' OR tsdoctype:') + ')' + getDcDate(dr);
		} else if (topics.length > 0) {
			return '(topics:' + getTopics(topics).join(' OR topics:') + getAparOnly().join(' OR topics:') + ')' + getDcDate(dr);
		}else {
			return '(tsdoctype:' + getAparOnly().join(' OR tsdoctype:') + ')' + getDcDate(dr);
		}
	}
	else if (topics.length > 0 && tc.length > 0 & dc.length > 0){
		return '(topics:' + getTopics(topics).join(' OR topics:') + ') AND (tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + ')' + getDcDate(dr);
	}  
	else if (topics.length > 0 && tc.length > 0){
		return '(topics:' + getTopics(topics).join(' OR topics:') + ') AND (tscategory:' + getTc(tc).join(' OR tscategory:') + ')' + getDcDate(dr);
	}  
	else if (topics.length > 0 && dc.length > 0){
		return '(topics:' + getTopics(topics).join(' OR topics:') + ') AND (tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + ')' + getDcDate(dr);
	}  
	else if(topics.length > 0) {
		return '(topics:' + getTopics(topics).join(' OR topics:') + ')';
	}
	else {
		if (tc.length > 0 && dc.length > 0) {
			if (atrn.length > 0 && atrv.length > 0) {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + ')' + getAtr() + getDcDate(dr);
			} else {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ') AND (tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + ')' + getDcDate(dr);
			}
		} else if (tc.length > 0) {
			if (atrn.length > 0 && atrv.length > 0) {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ')' + getAtr() + getDcDate(dr);
			} else {
				return '(tscategory:' + getTc(tc).join(' OR tscategory:') + ')' + getDcDate(dr);
			}
		} else if (dc.length > 0) {
			return '(tsdoctype:' + getDc(dc).join(' OR tsdoctype:') + ')' + getDcDate(dr);
		}
		else if(topics.length > 0) {
			return '(topics:' + getTopics(topics).join(' OR topics:') + ')';
		}
		else {
			return getDcDate(dr);
		}
	}

	//  return getTc(tc) + getDc(dc) + getAparOnly() + getDcDate(dr);
}

function getTc(tc) {
	// #808d begin
	// let tcArr = [];

	// if (tc.length > 0) {
	// 	tc = tc.split('+');
	// } else {
	// 	tc = [];
	// }

	// jQuery.map(tc, function (urlPar) {
	// 	let sURL = getdBlueTcQuery_url + '?code=' + urlPar;

	// 	if (urlPar.length) {
	// 		try {
	// 			jQuery.ajax({
	// 				url: sURL,
	// 				type: "GET",
	// 				async: false,
	// 				cache: false,
	// 				success: function (content) {
	// 					if (!jQuery.isEmptyObject(content)) {
	// 						let arr = content.Result;
	// 						arr = jQuery.map(arr, function (a) {
	// 							return a !== urlPar ? insertStr(a, 1, 'O') : a;
	// 						});
	// 						tcArr = tcArr.concat(arr);
	// 					}
	// 				}
	// 			});
	// 		} catch (err) {
	// 			console.log("An error occurred when geting the dblue request suggestion.");
	// 		}
	// 	}
	// });

	// return dedup(tcArr);
	// #808d end
	return tc.length > 0 ? dedup(tc.split('+')) : [];  // #808a
}

function getDc(dc) {
	if (dc.length > 0) {
		dc = dc.split('+');
	} else {
		dc = [];
	}

	return dedup(dc);
}

function getTopics(topics) {
	return topics.length > 0 ? dedup(topics.split('+')) : [];
}

function getAparOnly() {
	return ['D550', 'D100'];
}

function getAtrName() {
	let atrn = getURLParameter('atrn');
	try {
		if (atrn.length > 0) {
			return atrnArr.find(function (item, index, array) {
				return item.name === atrn;
			}).id;
		}
	} catch (e) { }
	return '';
}

function getAtrValue() {
	let atrv = getURLParameter('atrv');
	if (atrv.length > 0) {
		atrv = atrv.split("'").join("");
		atrv = atrv.split(".").join("X");
		atrv = atrv.split("/").join("X");
		atrv = atrv.split(" ").join("X");
		return atrv;
	} else {
		return '';
	}
}

function getAtrCategory() {
	let atrn = getURLParameter('atrn');
	try {
		if (atrn.length > 0) {
			return ' AND (' + atrnArr.find(function (item, index, array) {
				return item.name === atrn;
			}).category + ':';
		}
	} catch (e) { }
	return '';
}

function getAtr() {
	// console.log('getAtrName: ' + getAtrName());
	// console.log('getAtrValue: ' + getAtrValue());
	return getAtrName().length && getAtrValue().length ? getAtrCategory() + getAtrName() + 'V' + getAtrValue() + ')' : '';
}

function getParsObject(qType, url) {
	if (qType == "main") {
		return paramsUnserialize(window.location.search.substring(1));
	} else if (qType == "rq") {
		var rqPar = "";
		if (typeof (url) != "undefined" && url.indexOf("?") != -1) {
			rqPar = paramsUnserialize(url.split("?")[1]);
		}
		return rqPar;
	} else if (qType == "anchor") {
		var urlPar = window.location.hash.substring(1);
		if (typeof (urlPar) != "undefined" && urlPar != "") {
			urlPar = paramsUnserialize(dcurl(urlPar));
		} else {
			urlPar = "";
		}
		return urlPar;
	} else {
		var urlPar = "";
		if (typeof (url) != "undefined" && url.indexOf("?") != -1) {
			urlPar = paramsUnserialize(url.split("?")[1]);
		}
		return urlPar;
	}
};

function getObjPar(par) {
	try {
		if (typeof (par) != "undefined" && par != null) {
			return par.trim();
		} else {
			return "";
		}
	} catch (err) {
		return "";
	}
};

function getURLParameter(sParam) {
	var sPageURL = window.location.search.substring(1);
	var sURLVariables = sPageURL.split('&');
	for (var i = 0; i < sURLVariables.length; i++) {
		var sParameterName = sURLVariables[i].split('=');
		if (sParameterName[0] == sParam) {
			return sParameterName[1];
		}
	}
	return "";
}

function checkSignIn() {
	if (IBMCore.common.util.cookie.get('IBMISS') != null) return true;
	return false;
};

function isTcSearch() {
	var tcSearchAnchor = getObjPar(getParsObject("anchor", "").tcSearch);
	if ((checkTcParExist() && !isSearchedBySearchbox()) || tcSearchAnchor == "true") return true;
	return false;
};

function checkTcParExist() {
	try {
		var pars = paramsUnserialize(window.location.search.substring(1));
		for (var alias in pars) {
			if (alias.match(/tc[1-9]{0,1}/gi)) {
				return true;
			}
		}
		return false;
	} catch (err) {
		return false;
	}
};

/* Check if the different query between anchor query and url parameter query. */
function isSearchedBySearchbox() {
	var anchorPars = window.location.hash;
	if (checkIndexExist(dcurl(anchorPars), "q=")) {
		anchorPars = dcurl(anchorPars).substring(1);
		var mainParObj = getParsObject("main", "");
		var mainQ = cleanQuery(getObjPar(mainParObj.q) + getAdditionalQuery()).trim();
		var anQ = cleanQuery(getObjPar(dojo.queryToObject(anchorPars).q)).trim();
		if (anQ == mainQ) {
			return false;
		} else {
			return true
		}
	} else {
		return false;
	}
};

function paramsUnserialize(p) {
	var ret = {},
		seg = p.toString().replace(/^\?/, '').split('&'),
		len = seg.length, i = 0, s;
	for (; i < len; i++) {
		if (!seg[i]) { continue; }
		s = seg[i].split('=');
		ret[s[0]] = s[1];
	}
	return ret;
}

function checkIndexExist(string, index) {
	if (typeof (string) != "undefined" && string != "" && string.indexOf(index) != -1) {
		return true;
	}
	return false;
};

function getAdditionalQuery() {
	var pars = getParsObject("main", "");
	var adQuery = "";
	for (var i in pars) {
		if (i.match(/q[0-9]{1}/gi) && pars[i] != "") {
			adQuery += " " + pars[i]
		}
	}
	return adQuery.trim();
};

function getTcTopValue() {
	var pars = paramsUnserialize(window.location.search.substring(1));
	var tcAliasV = "";
	for (var alias in pars) {
		if (alias.match(/tc[1-9]{1}/gi)) {
			if (tcAliasV != "") {
				if (alias.replace(/\tc/g, " ").trim() > tcAliasV.replace(/\tc/g, " ").trim()) {
					tcAliasV = alias;
				}
			} else {
				tcAliasV = alias;
			}
		}
	}
	if (typeof (tcAliasV) != "undefined" && tcAliasV != "")
		return pars[tcAliasV];
	return "";
};

function cleanQuery(query) {
	var cleanQ = query;
	if (typeof (cleanQ) != "undefined" && cleanQ != "") {
		cleanQ = cleanQ.replace(/\+/g, " ").trim();
		cleanQ = cleanQ.replace(/\(/g, " ").trim();
		cleanQ = cleanQ.replace(/\)/g, " ").trim();
		if (checkIndexExist(cleanQ, "AND")) {
			var queryCleaner = "";
			for (var i = 0; i < cleanQ.split("AND").length; i++) {
				if (queryCleaner == "") {
					queryCleaner += "(" + cleanQ.split("AND")[i].trim() + ")";
				} else {
					queryCleaner += " AND (" + cleanQ.split("AND")[i].trim() + ")";
				}
			}
			if (queryCleaner != "") cleanQ = queryCleaner;
		}
		return cleanQ;
	} else {
		return ""
	}
};

function cleanFilter(query) {
	var leftChar = 0;
	var rightChar = 0;
	if (checkIndexExist(query, "AND")) {
		var cleanFilter = "";
		for (var i = 0; i < query.split("AND").length; i++) {
			if (query.split("AND")[i].indexOf("language") == -1) {
				if (cleanFilter == "") {
					cleanFilter += query.split("AND")[i].trim();
				} else {
					cleanFilter += " AND " + query.split("AND")[i].trim();
				}
			}
		}
		if (cleanFilter != "")
			query = cleanFilter.trim();
	}
	query = query.replace(/\+/g, " ").trim();
	for (var i = 0; i < query.length; i++) {
		if (query[i] == "(") leftChar++;
		if (query[i] == ")") rightChar++;
	}
	if (leftChar > rightChar) {
		query = query.trim() + ")";
	} else if (rightChar > leftChar) {
		query = "(" + query.trim();
	}
	if (query == "()") query = "";
	if (query.indexOf("language") != -1) query = "";
	return query;
};

function ChangeUrl() {
	var urlPars = window.location.search.substring(1);
	var mainQueryObj = getParsObject("main", "");
	var anchorQueryObj = getParsObject("anchor", "");
	var searchTitle = 'dBlue Srarch Result';
	var tagsearchTitle = 'dBlue Tag Srarch Result';
	var search_url = '/search.wss?';
	var tagsearch_url = '/tagsearch.wss?';
	var iptSearch = ecurl(jQuery("#iptSearch").val().trim());

	if (typeof (history.pushState) != "undefined") {
		if (IsTagSearch()) {
			if (getObjPar(mainQueryObj.tag) != "") {
				mainQueryObj.tag = iptSearch;
				// urlPars = jQuery.param(mainQueryObj);
				urlPars = param(mainQueryObj);
			}
			var obj = { Title: tagsearchTitle, Url: tagsearch_url + urlPars };
		} else {
			if (IsStartNewKeywordSearch() && (getObjPar(mainQueryObj.tc) != "")) {
				delete mainQueryObj.tc;
				jQuery("#ibm-tc-check").hide();
				jQuery("#iptSearch").attr("placeholder", "Search support or find a product");
			}

			if (getObjPar(mainQueryObj.q) != "") {
				mainQueryObj.q = iptSearch;
				// urlPars = jQuery.param(mainQueryObj);
				urlPars = param(mainQueryObj);

			} else {
				// urlPars = "q=" + jQuery("#iptSearch").val().trim() + "&" + jQuery.param(mainQueryObj);
				urlPars = "q=" + iptSearch + "&" + param(mainQueryObj);
			}
			var obj = { Title: searchTitle, Url: search_url + urlPars };
		}
		// console.debug("urlPars: " + urlPars);
		history.pushState(obj, obj.Title, obj.Url);
	} else {
		console.debug("Browser does not support HTML5.");
	}
}

function spngChangeUrl() {
	var urlPars = window.location.search.substring(1);
	var mainQueryObj = getParsObject("main", "");
	var anchorQueryObj = getParsObject("anchor", "");
	var searchTitle = 'dBlue Srarch Result';
	var tagsearchTitle = 'dBlue Tag Srarch Result';
	var search_url = '/search.wss?';
	var tagsearch_url = '/tagsearch.wss?';
	var iptSearch = ecurl(jQuery("#spng-search-query").val().trim());

	if (typeof (history.pushState) != "undefined") {
		if (IsTagSearch()) {
			if (getObjPar(mainQueryObj.tag) != "") {
				mainQueryObj.tag = iptSearch;
				// urlPars = jQuery.param(mainQueryObj);
				urlPars = param(mainQueryObj);
			}
			var obj = { Title: tagsearchTitle, Url: tagsearch_url + urlPars };
		} else {
			if (IsStartNewKeywordSearch() && (getObjPar(mainQueryObj.tc) != "")) {
				delete mainQueryObj.tc;
				jQuery("#ibm-tc-check").hide();
				jQuery("#iptSearch").attr("placeholder", "Search support or find a product");
			}

			if (getObjPar(mainQueryObj.q) != "") {
				mainQueryObj.q = iptSearch;
				// urlPars = jQuery.param(mainQueryObj);
				urlPars = param(mainQueryObj);

			} else {
				// urlPars = "q=" + jQuery("#iptSearch").val().trim() + "&" + jQuery.param(mainQueryObj);
				urlPars = "q=" + iptSearch + "&" + param(mainQueryObj);
			}
			var obj = { Title: searchTitle, Url: search_url + urlPars };
		}
		// console.debug("urlPars: " + urlPars);
		history.pushState(obj, obj.Title, obj.Url);
	} else {
		console.debug("Browser does not support HTML5.");
	}
}

function param(objPar) {
	var urlPars = '';
	for (var key in objPar) {
		var str = key + '=' + objPar[key];
		urlPars += (urlPars === '') ? str : '&' + str;
	}
	return urlPars;
}

function IsStartNewKeywordSearch() {
	return jQuery("#spng-tc-check-box").is(":checked");
	// return jQuery('#ibm-tc-checkbox').is(":checked");
}

function ecurl(value) {
	return encodeURIComponent(value);
}

function dcurl(value) {
	return decodeURIComponent(value);
}

function IsTagSearch() {
	return (window.location.href.indexOf('tagsearch.wss?') !== -1);
}

function score2Star(fScore) {
	var iStar = parseInt(fScore);
	if ((parseFloat(fScore).toFixed(2) - parseInt(fScore).toFixed(2))
		.toFixed(2) > 0.74) {
		iStar = iStar + 1;
	} else if ((parseFloat(fScore).toFixed(2) - parseInt(fScore).toFixed(2))
		.toFixed(2) >= 0.25) {
		iStar = iStar + 0.5;
	}
	return iStar;
}

function numWithComma(num) {
	return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function IsDblueSiteSearch() {
	return getURLParameter('ibm-search') == 'site' ? true : false;
}

function dedup(arr) {
	var hashTable = {};

	return arr.filter(function (el) {
		var key = JSON.stringify(el),
			match = Boolean(hashTable[key]);

		return (match ? false : hashTable[key] = true);
	});
}

function insertStr(source, start, newStr) {
	return source.slice(0, start) + newStr + source.slice(start);
}

function getDcDate(dr) {
	if (dr.length > 0 && dr !== 'all') {
		let d = new Date();
		let start = '';
		let end = new Date().toISOString().slice(0, 10).split('-').join('');

		switch (dr.slice(dr.length - 1)) {
			// parseInt(dr.slice(0, -1));
			case 'y':
				start = new Date(d.setFullYear(d.getFullYear() - parseInt(dr.slice(0, -1)))).toISOString().slice(0, 10).split('-').join('');
				break;
			case 'm':
				start = new Date(d.setMonth(d.getMonth() - parseInt(dr.slice(0, -1)))).toISOString().slice(0, 10).split('-').join('');
				break;
			case 'd':
				start = new Date(d.setDate(d.getDate() - parseInt(dr.slice(0, -1)))).toISOString().slice(0, 10).split('-').join('');
				break;
			default:
		}
		return ' AND (dcdate:[' + start + ' TO ' + end + '])';
	}
	return '';
}
